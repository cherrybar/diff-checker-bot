import { Button, ChatState, IMessageActionPayload } from '../types';
import User from '../models/user';

export async function manageSubscription({ chatId, bot }: IMessageActionPayload) {
	const user = await User.findById(chatId);

	if (!user) {
		return;
	}

	const statusText = user.isSubscribed ? '–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.' : '–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.';
	const actionText = user.isSubscribed ? '–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏ "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"' : '–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏ "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"';

	await bot.sendMessage(chatId, `${statusText} ${actionText}`, {
		reply_markup: {
			inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: Button.Cancel }]],
		},
	});

	await user.updateOne({ state: ChatState.WaitingForSubscriptionToggle });
}

export async function manageSubscriptionResponseHandler({ text, bot, chatId, user }: { text: string; bot: any; chatId: number; user: any }) {
	const needToggle = (text.toLowerCase() === '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' && !user.isSubscribed) || (text.toLowerCase() === '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è' && user.isSubscribed);
	await user.updateOne({ state: ChatState.Default, isSubscribed: needToggle ? !user.isSubscribed : user.isSubscribed });

	if (needToggle) {
		const msg = user.isSubscribed ? '‚úÖ –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π' : 'üéâ –¢–µ–ø–µ—Ä—å –ø–æ –±—É–¥–Ω—è–º –≤ 11 —É—Ç—Ä–∞ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–∏—Å—å–º–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏';
		await bot.sendMessage(chatId, msg);
	}
}
